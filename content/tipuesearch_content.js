var tipuesearch = {"pages": [{'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': 'About.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n', 'tags': '', 'url': 'Develop.html'}, {'title': 'weeks', 'text': '', 'tags': '', 'url': 'weeks.html'}, {'title': 'Week2~Week5', 'text': 'week2 \n 建立個人倉儲cad2019及編輯 \n 1.下載 2019Fall可攜套件.7z \xa0(編譯\xa0 Solvespace 用)，完成後並開啟 2.登入自己的github帳號後，創建新的倉儲cad2019。 3.進入要存放資料夾tmp。 4.輸入 git clone \xa0 https://github.com/s40723239/cad2019複製 個人倉儲至資料夾 。 5.輸入git submodule add https://github.com/mdecourse/cmsimde.git 取得子模組資料。 6.進入cmsimde，輸入python -m pip install flask_cors 更改模組。 7.完成後，python wsgi.py 開始編輯倉儲(login密碼為admin)。 8.編輯完成後，git status \xa0 > \xa0 git add . \xa0 > \xa0 git commit -m "...." \xa0 > \xa0 git push。 \n \n week3 \n 進行Solvespace 編譯 \n 1. 將 Y:\\portablegit\\bin\\sh.exe 改名為 sh_rename_for_solvespace.exe \n 2. 查驗 git 版本是否在"2.13以上" \n 3.git clone --recurse-submodules https://github.com/solvespace/solvespace.git solvespace(務必在網路穩定地方下進行下載) \n 4.編輯Y:\\tmp\\solvespace\\extlib\\angle\\CMakeLists.txt 開啟後將第713行及714行前方加上"#" \n 5.將 libpng.dll.a 的編譯，改名為 libpng_static.a, 並放到編譯系統的 lib 目錄中 \n 6. cd solvespace\xa0>cd extlib\xa0>cd libpng >mkdir build > cd build\xa0 \n 7.輸入cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release \n 8.輸入mingw32-make > 退到solvespace > mkdir build > cd build \n 9.在執行一次cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release \n 10.在輸入mingw32-make\xa0> Done \n \xa0 \xa0 \xa0 \xa0  \n week5 \n 使用solvespace 練習繪製圖案 \n \n \n', 'tags': '', 'url': 'Week2~Week5.html'}, {'title': 'Week6~Week9', 'text': 'week6 \n 利用Solvespace畫出車子 \n \n V-rep 模型控制 \n \n week7 \n 更改 solvespace中about的內容 \n \n \n solvespace零件圖 \n \n week8\xa0 \n 啟用cmsimde裡的網誌系統 \n \n 導入webots \n \n \n', 'tags': '', 'url': 'Week6~Week9.html'}, {'title': 'Week10~Week14', 'text': "week10 \n 1.由組長創建 分組網站\xa0 \n 2.由組員透過fork加入創建之分組網站 \n 3.加入後用git\xa0 clone submodules 組別倉儲網址\xa0 \n 4.以git pull request的方式進行推送(必須由組長認證推送內容才可以成功推送) \n 5.閱讀nx12及nx3的操作手冊和教程 \n week12 \n 將組長分配的翻譯作業做完 \n 我被分配到NX 12 for Engineering Design 的第八章 \n 第八章 有限元分析 \n 有限元分析（FEA）是有限元法（FEM）的預測結構或流體的響應特性所施加的因素，例如力，壓力，熱，和振動的實際應用。 \n 可以幫助工程師們有一個更好的了解產品的性能在製造和測試之前。 \n 8.1概述 \n 8.1.1元件形狀和節點  的元素可以被分類為基於維度數目和節點中的元素的數量不同的類型。以下是一些類型的用於離散元件組成。 \n 8.1.2 Solution Steps \n 啟動模擬>選擇材料特性>運用負載>運用邊界條件>嚙合機構>解決方案和結果 \n 8.1.3 Simulation Navigator \n 仿真Navigator提供的能力，激活現有的解決方案，創建新的，並通過創建和修改運動的物體使用創建的解決方案來構建機制。要顯示模擬導航 ➢在資源欄中單擊仿真Navigator選項卡如該圖所示 它顯示了模型創建仿真的列表。在每個模擬中，它顯示載荷，邊界條件，多種網孔的列表，結果，產生的等報告。 \n 8.2模擬CREATION \n ➢將文件複製並粘貼Impeller_impeller.prt到一個新的文件夾，以避免被改變向大會提出，如果該部分尚未在NX窗口中打開➢點擊新建→模擬  ➢打開此新複製的文件 \n 如果部分在NX已經打開，然後從頂部功能區欄，點擊應用程序→設計  或者➢點擊文件→所有應用程序→模擬→設計仿真  當你第一次打開設計仿真模塊的任何文件，它會自動彈出新的有限元與仿真對話框創建一個模擬。在彈出的對話框中，單擊確定以創建新的模擬。  那麼在接下來的彈出窗口的解決方案，您可以選擇解算器和分析類型。  默認的求解器類型的NX Nastran設計和分析類型結構。  ➢選擇確定以創建一個新的解決方案稱為方案一，將被顯示在模擬導航。在這裡，我們保持其他項目為默認值。 \n 現在，模擬導航將類似於下圖 \n 8.3材料性能  下一個步驟是將材料特性分配給該模擬的實體模型。因為我們沒有在庫中的任何數據檢索標準的材料，我們將創建一個。讓我們假設，我們將用鋼管來製造葉輪。 \n 照著它的指示步驟一路做下去 \n 8.4網格劃分  網格選項離散化的模型成小的元件 \n 8.5荷載  施加在實體模型上的負載應是輸入到系統中。用於葉輪，假設主要力作用於渦輪機葉片的凹表面上。這種加載可以通過所有五個表面上正常的壓力近似。由於我們不關心負荷的大小，讓我們的價值為100磅/平方英寸英寸誇大葉片的變形。 \n 8.6邊界條件  葉輪繞圓錐體的軸與軸的軸旋轉，如您在前幾章的裝配中所看到的那樣。它不是固定的，但我們關心的是葉片相對於葉輪芯的變形。錐形芯相對固定，葉片的變形要進行相應的分析。 \n 8.7結果與模擬  8.7.1解決了模擬  的有限元模型，現在可以解決和分析。這是一個很好的做法，為模型完成第一次檢查之前，我們進入模型求解。要檢查模型 \n 8.7.2 FEA結果 \n 可以輕鬆地解釋從顏色編碼的結果。橘紅色顯示的最大變形區和藍色區域顯示的最小變形區。可以觀察到，由於錐形核心是固定的，它經歷零變形。 \n 8.7.3仿真和動畫  點擊頂部帶狀條結果選項卡上。一種用於動畫組上可以看到其如下 \n 可以看到負載應用到葉片葉輪變形的動畫。 \n 8.8練習 \n 8.8.1手扳壓機欄  打開文件“Arborpress_L-bar.prt'，做一個類似的結構分析，考慮材料如鋼。用於網格的元件的尺寸和類型應為'10'和'四（10）'。對於負載，與應用500的頂表面上的大小的常壓如示於下面的第一個圖。 \n 8.8.2 搖臂  在本練習中，您將檢查元素類型和網格大小對有限元分析結果的影響。打開第 4 章中建模的搖臂。分配以下材料屬性：Young 的模量 = 3.0 × 107 psi，泊森的比率 = 0.29，品質密度 = 7.35 × 10-4 slug/in3。修復計數器孔孔和計數器沉孔（即修復圓柱面），如下圖所示，並施加 600 psi 值的壓力負載，以正常顯示的面。對於以下四種情況中，分別獲取偏轉輪廓和 Von-Mises 應力輪廓。 \n week13 \n webots tutorial\xa0 \n \n week10~12 進度報告 \n \n week14\xa0 \xa0 \n tutorial 2 and 3 \n \n \n", 'tags': '', 'url': 'Week10~Week14.html'}, {'title': 'proe的開發緣起', 'text': '\n pro-e是Pro/Engineer的簡稱，更常用的簡稱是ProE或Pro/E，Pro/E是美國參數技術公司（Parametric Technology Corporation，簡稱PTC）的重要產品，在目前的三維造型軟件領域中佔有著重要地位。 \n pro-e作為當今世界機械CAD/CAE/CAM領域的新標準而得到業界的認可和推廣，是現今主流的模具和產品設計三維CAD/CAM軟件之一。 \n Pro/ENGINEER在2010年8月改名為「 Creo Elements/Pro 」 \n 2011年6月再改名為「 Creo Parametric 」', 'tags': '', 'url': 'proe的開發緣起.html'}, {'title': 'Week15~Week18', 'text': 'week15\xa0 進度回報 \n \n week16 越野車組裝並轉檔 \n 主體及輪胎輪軸 \n \n \n \n \n week17 越野車模擬 \n', 'tags': '', 'url': 'Week15~Week18.html'}, {'title': 'Building a clean model tutorial\xa0翻譯', 'text': "Model definition \n Now we are ready to define our model. We start by building the model herarchy: we attach the last dynamic robot link ( robot_link_dyn6 ) to its corresponding joint ( robot_joint6 ) by selecting\xa0 robot_link_dyn6 , then control-selecting\xa0 robot_joint6 , then [Menu bar --> Edit --> Make last selected object parent]. We could also have done this step by simply dragging object\xa0 robot_link_dyn6 \xa0onto\xa0 robot_link6 \xa0in the\xa0 scene hierarchy . We go on by now attaching\xa0 robot_joint6 \xa0to\xa0 robot_link_dyn5 , and so on, until arrived at the base of the robot. We now have following scene hierarchy: \n 型號定義 \n 現在我們準備定義模型了。我們從建立模型層次結構開始：通過選擇 robot_link_dyn6 ，然後控制選擇 robot_joint6 ，然後選擇 [ 菜單欄 -> 編輯 -> 使最後一個選中的對象，將最後一個動態機器人鏈接（ robot_link_dyn6 ）附加到其相應的關節（ robot_joint6 ）。 ] 。我們也可以做這一步通過簡單的拖動對象 robot_link_dyn6 到 robot_link6 在 場景層次 。現在，我們將 robot_joint6 附加到 robot_link_dyn5 上 ，依此類推，直到到達機器人的底部。現在，我們具有以下場景層次結構： \n \xa0So we rename\xa0 robot \xa0to\xa0 robot_visibleBase , and\xa0 robot_dyn \xa0to\xa0 robot . Now we select the base of the hierarchy tree (i.e. object\xa0 robot ) and in the\xa0 object common properties \xa0we enable\xa0 Object is model base . We also enable\xa0 Object/model can transfer or accept DNA . A model bounding box appeared, encompassing the whole robot. The bounding box however appears to be too large: this is because the bounding box also encompasses the invisible items, such as the joints. We now exclude the joints from the model bounding box by enabling the\xa0 Don't show as inside model selection \xa0item for all joints. We could do the same procedure for all invisible items in our model. This is also a useful option in order to also exclude large sensors or other items from the model bounding box. We now have following situation: \n 我們將 robot 重命名為 robot_visibleBase ，並將 robot_dyn 重命名為 robot 。現在，我們選擇層次結構樹的基礎（即對像 機械手 ），並在 對象公共屬性中 啟用 “\xa0 對象為模型基礎 ” 。我們還使 對象 / 模型可以轉移或接受 DNA 。出現了一個模型包圍盒，包圍了整個機器人。但是，邊界框似乎太大：這是因為邊界框還包含不可見的項，例如關節。現在，通過對所有關節啟用 “ 不顯示為內部模型 ” 選擇 項，將關節從模型邊界框中排除。我們可以對模型中的所有不可見項執行相同的過程。這也是一個有用的選項，可以將大型傳感器或其他項目也排除在模型邊界框之外。我們現在有以下情況： \n \xa0We now protect our model from accidental modification. We select all visible objects in the robot, then enable\xa0 Select base of model instead : if we now click a visible link in the scene, the base of the robot will be selected instead. This allows us to manipulate the model as if it was a single object. We can still select visible objects in the robot via control-shift-clicking in the scene, or by selecting the object in the scene hierarchy. We now put the robot into a correct default position/orientation. First, we save current scene as a reference. Then we select the model and\xa0 modify its position/orientation \xa0appropriately. It is considered good practice to position the model (i.e. its base object) at X=0 and Y=0. \n 現在，我們保護模型免受意外修改。我們選擇機器人中所有可見的對象，然後啟用 “\xa0 選擇模型的基礎 ” ：如果現在單擊場景中的可見鏈接，則會改為選擇機器人的基礎。這使我們可以像對待單個對像一樣操作模型。我們仍然可以通過按住 Shift 鍵並單擊場景或在場景層次中選擇對象來選擇機器人中的可見對象。現在，我們將機器人置於正確的默認位置 / 方向。首先，我們將當前場景保存為參考。然後我們選擇模型並 修改其位置/ 方向 適當地。將模型（即其基礎對象）放置在 X = 0 和 Y = 0 處被認為是一種好習慣。 \n \xa0We now run the simulation: the robot will collapse, since the joints are not controlled by default.\xa0 When we added the joints in the previous stage , we created joints in force/torque mode, but their motor or controller was disabled (by default). We can now adjust our joints to our requirements. In our case, we want a simple PID controller for each one of them. In the joint dynamic properties, we click\xa0 Motor enabled \xa0and adjust the\xa0 maximum torque . We then click\xa0 Control loop enabled \xa0and select\xa0 Position control (PID) . We now run the simulation again: the robot should hold its position. Try to switch the current physics engine to see if the behaviour is consistent across all supported physics engines. You can do this via the appropriate\xa0 toolbar button , or in the\xa0 general dynamics properties . \n 現在我們運行模擬：由於默認情況下關節不受控制，因此機器人將崩潰。 在上一階段添加關節時 ，我們以力 / 扭矩模式創建了關節，但其電動機或控制器已禁用（默認情況下）。現在，我們可以根據需要調整關節。在我們的案例中，我們希望為每個控制器都提供一個簡單的 PID 控制器。在關節動態屬性中，單擊 “\xa0 啟用電動機 ” 並調整 最大扭矩 。然後，我們點擊 “\xa0 啟用控制環 ” ， 然後選擇 “\xa0 位置控制（ PID ） ” 。現在，我們再次運行仿真：機器人應保持其位置。嘗試切換當前的物理引擎，以查看行為在所有受支持的物理引擎之間是否一致。您可以通過適當的 工具欄按鈕 ，或在 常規動力學屬性中執行此操作 。 \n \xa0During simulation, we now verify the scene dynamic content via the\xa0 Dynamic content visualization & verification toolbar button . Now, only items that are taken into account by the physics engine will be display, and the display is\xa0 color-coded . It is\xa0 very important \xa0to always do this, and specially when your dynamic model doesn't behave as expected, in order to quickly debug the model. Similarly, always look at the scene hierarchy during simulation: dynamically enabled objects should display a ball-bounding icon on the right-hand side of their name. \n 在仿真過程中，我們現在通過 “\xa0 動態內容可視化和驗證” 工具欄按鈕來 驗證場景動態內容。現在，將僅顯示物理引擎考慮的項目，並且該顯示使用 顏色編碼 。這是 非常重要的 ，始終做到這一點，特別是當預期，為了快速調試模型動態模型不表現。同樣，在仿真過程中請始終查看場景層次：動態啟用的對象應在其名稱的右側顯示一個球形圖標。 \n Finally, we need to prepare the robot so that we can easily attach a gripper to it, or easily attach the robot to a mobile platform (for instance). Two dynamically enabled shapes can be rigidly attached to each other in two different ways: \n \uf0b7\xa0  by grouping them : select the shapes, then [Menu bar --> Edit --> Grouping/Merging --> Group selected shapes]. \n \uf0b7\xa0  by attaching them via a force/torque sensor : a\xa0 force torque sensor \xa0can also act as a rigid link between two separate dynamically enabled shapes. \n In our case, only option 2 is of interest. We create a force/torque sensor with [Menu bar --> Add --> Force sensor], then move it to the tip of the robot, then attach it to object\xa0 robot_link_dyn6 . We change its size and visual appearance appropriately (a red force/torque sensor is often perceived as an optional attachment point, check the various robot models available). We also change its name to\xa0 robot_attachment : \n 最後，我們需要準備機器人，以便我們可以輕鬆地將抓取器連接到它，或輕鬆地將機器人連接到移動平台（例如）。可以通過兩種不同的方式將兩個動態啟用的形狀嚴格地彼此附加： \n \uf0b7\xa0  通過對它們進行分組 ：選擇形狀，然後單擊 [ 菜單欄 -> 編輯 -> 分組 / 合併 -> 對選定形狀進行分組 ] 。 \n \uf0b7\xa0  通過通過力 / 扭矩傳感器進行連接 ： 力扭矩傳感器 還可以充當兩個單獨的動態啟用形狀之間的剛性鏈接。 \n 在我們的情況下，只有選項 2 是有意義的。我們使用 [ 菜單欄 -> 添加 -> 力傳感器 ] 創建一個力 / 扭矩傳感器，然後將其移動到機器人的尖端，然後將其附加到對象 robot_link_dyn6 上 。我們會適當地更改其尺寸和外觀（紅色力 / 扭矩傳感器通常被視為可選的連接點，請檢查可用的各種機器人型號）。我們還將其名稱更改為 robot_attachment ： \n \xa0Now we drag a gripper model into the scene, keep it selected, then control-click the attachment force sensor, then click the\xa0 Assembling/disassembling toolbar button . The gripper goes into place: \n 現在，我們將抓取器模型拖到場景中，使其保持選中狀態，然後按住 Control 鍵並點按附件力傳感器，然後單擊 “\xa0 裝配/ 拆卸” 工具欄按鈕 。夾持器到位： \n The gripper knew how to attach itself because it was appropriately configured during its model definition. We now also need to properly configure the robot model, so that it will know how to attach itself to a mobile base for instance. We select the robot model, then click\xa0 Assembling \xa0in the\xa0 object common properties . Set an empty string for\xa0 'Parent' match values , then click\xa0 Set matrix . This will memorize the current base object's local transformation matrix, and use it to position/orient itself relative to the mobile robot's attachment point. To verify that we did things right, we drag the model\xa0 Models/robots/mobile/KUKA Omnirob.ttm \xa0into the scene. Then we select our robot model, then control-click one of the attachment points on the mobile platform, then click the\xa0 Assembling/disassembling toolbar button . Our robot should correctly place itself on top of the mobile robot: \n 抓具知道如何附加自身，因為它在模型定義期間進行了適當的配置。現在，我們還需要正確配置機器人模型，以便它將知道如何將自己附加到移動基座上。我們選擇機器人模型，然後在 對象公共屬性中 單擊 “\xa0 組裝 \xa0”\xa0 。為 “ 父項 ” 匹配值 設置一個空字符串，然後點擊 設置矩陣 。這將記住當前基礎對象的局部轉換矩陣，並使用它相對於移動機器人的附著點定位 / 定向。為了驗證我們做的正確，我們拖動模型 Models / robots / mobile / KUKA Omnirob.ttm 進入現場。然後，選擇機器人模型，然後在移動平台上按住 Control 鍵並單擊其中一個附接點，然後單擊 “\xa0 組裝/ 拆卸” 工具欄按鈕 。我們的機器人應該正確地將自己放置在移動機器人的頂部： \n Now we could add additional items to our robot, such as sensors for instance. At some point we might also want to attach\xa0 embedded scripts \xa0to our model, in order to control its behaviour or configure it for various purposes. In that case, make sure to understand\xa0 how object handles are accessed from embedded scripts . We can also control/access/interface our model from a\xa0 plugin , from a\xa0 remote API \xa0client, from a\xa0 ROS \xa0node, from a\xa0 BlueZero \xa0node, or from an\xa0 add-on . \n Now we make sure we have reverted the changes done during robot and gripper attachment, we collapse the hierarchy tree of our robot model, select the base of our model, then save it with [Menu bar --> File --> Save model as...]. If we saved it in the\xa0 model \xa0folder, then the model will be available in the\xa0 model brower . \n 現在，我們可以向機器人添加其他項目，例如傳感器。在某些時候，我們可能還希望將 嵌入式腳本 附加到我們的模型中，以便控制其行為或出於各種目的對其進行配置。在這種情況下，請確保了解 如何從嵌入式腳本訪問對象句柄 。我們還可以通過 插件 ， 遠程API 客戶端， ROS 節點， BlueZero 節點或 附加組件 來控制 / 訪問 / 接口模型。 \n 現在，確保已恢復在機械手和抓爪安裝過程中所做的更改，我們折疊了機械手模型的層次樹，選擇了模型的基礎，然後使用 [ 菜單欄 -> 文件 -> 將模型另存為 ...] 。如果我們將其保存在 模型 文件夾中，則該模型將在 模型瀏覽器中 可用。 \n \xa0 \n \xa0 \n \xa0 \n \xa0 \n \xa0 \n \xa0", 'tags': '', 'url': 'Building a clean model tutorial\xa0翻譯.html'}, {'title': 'Note', 'text': '', 'tags': '', 'url': 'Note.html'}, {'title': 'solvespace 常用指令', 'text': 'shift+W 建立平面 \n P 點 \n C 圓 \n A 曲線 \n S 線 \n D 標註 \n N 角度標註 \n M 鎖定中心 \n V 鉛直 \n H 水平 \n Q 兩線相同 \n O 重和 \n G 建構線 \n \n', 'tags': '', 'url': 'solvespace 常用指令.html'}]};